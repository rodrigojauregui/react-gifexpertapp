{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.jsx","components/LoaderComp.jsx","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","components/GifExpertApp.jsx","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","className","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","LoaderComp","GifGridItem","src","alt","width","height","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4LAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACE,mCACE,sBACEC,SAZe,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,EAAeE,GACfC,EAAc,MASZM,UAAU,OAFZ,SAIE,uBACEA,UAAU,WACVC,KAAK,OACLC,MAAOT,EACPU,SAvBkB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,e,8BCRbG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEhBC,EAFgB,gDAE+BC,UAAUH,GAFzC,+DAGHI,MAAMF,GAHH,cAGhBG,EAHgB,gBAICA,EAAKC,OAJN,uBAIdC,EAJc,EAIdA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATf,kBAYfM,GAZe,4CAAH,sDCCRO,EAAa,WACxB,OACE,sBAAKrB,UAAU,cAAf,UACE,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,4BCdOsB,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,MAAOV,EAAc,EAAdA,IAAc,EAATS,GACxC,OACE,gCACE,mCAAMC,EAAN,OACA,qBAAKK,IAAKf,EAAKgB,IAAKN,EAAOO,MAAM,MAAMC,OAAO,YCAvCC,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAExB,ECL0B,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WAEP1B,EAAQC,GACH0B,MAAM,SAAAlB,GACHgB,EAAS,CACLjB,KAAMC,EACNc,SAAS,SAInB,CAACtB,IAEAuB,EDdiBI,CAAa3B,GAA/BO,EAAR,EAAQA,KAAMe,EAAd,EAAcA,QAEd,OACE,gCACE,mCAAMtB,EAAN,OACCsB,GAAW,cAAC,EAAD,IAEXf,EAAKE,KAAI,SAACC,GAAD,OACR,wBAAC,EAAD,2BAAiBA,GAAjB,IAAsBkB,IAAKlB,EAAIC,aEZ1BkB,EAAe,WAC1B,MAAoC3C,mBAAS,IAA7C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAOA,OACE,sBAAKS,UAAU,OAAf,UACE,sBAAKA,UAAU,wBAAf,UACE,8CAEA,cAAC,EAAD,CAAaT,cAAeA,IAC5B,0BAGF,qBAAKS,UAAU,QAAf,SAAyB,cAAC,EAAD,CAASM,SAAU8B,UCTnCC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.8f1ac14e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\n\nexport const AddCategory = ({setCategories}) => {\n\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 0){\n      setCategories( inputValue );\n      setInputValue('')\n    }\n\n  };\n\n  return (\n    <>\n      <form \n        onSubmit={handleSubmit}\n        className=\"mb-4\"\n      >\n        <input\n          className=\"border-2\"\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n      </form>\n    </>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n};\n","\n export const getGifs = async (category) => {\n    \n  const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=DLvjXBVtW9JYDbl3AAftyvVBD5kSbE1X`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url,\n    };\n  });\n  return gifs;\n};","import React from \"react\";\n\nexport const LoaderComp = () => {\n  return (\n    <div className=\"lds-spinner\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ title, url, id }) => {\n  return (\n    <div>\n      <h1> {title} </h1>\n      <img src={url} alt={title} width=\"200\" height=\"300\" />\n    </div>\n  );\n};\n","\nimport React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { LoaderComp } from \"./LoaderComp\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n\n  const { data, loading } = useFetchGifs(category);\n\n  return (\n    <div>\n      <h3> {category} </h3>\n      {loading && <LoaderComp/> }\n\n      {data.map((img) => (\n        <GifGridItem {...img} key={img.id} />\n      ))}\n    </div>\n  );\n};\n\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () =>{\n        \n        getGifs(category)\n            .then( gifs => {\n                setState({\n                    data: gifs,\n                    loading: false\n                });\n            })\n          \n        },[category])\n\n    return state;\n\n}","import React, { useState } from \"react\";\nimport { AddCategory } from \"./AddCategory\";\nimport { GifGrid } from \"./GifGrid\";\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(\"\");\n\n  // const handleAdd = () => {\n  //   setCategories([...categories,('Hunter')])\n  //   // setCategories( cats => [...cats, 'Hunter'] );\n  // }\n\n  return (\n    <div className=\"p-10\">\n      <div className=\"fixed bg-white w-full\">\n        <h2>GifExpertApp</h2>\n\n        <AddCategory setCategories={setCategories} />\n        <hr />\n      </div>\n\n      <div className=\"mt-20\" >{<GifGrid category={categories} />}</div>\n    </div>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './components/GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}